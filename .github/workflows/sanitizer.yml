name: Sanitizer

on:
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  ADDRESS_SANITIZER_FLAG: True
  PLUGINVAL_DISABLED: Plugin state restoration

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS Address Sanitizer
            os: macos-latest
            build_type: Debug
            pluginval-binary: ./pluginval/Builds/pluginval_artefacts/Debug/pluginval.app/Contents/MacOS/pluginval
            plugin_os_format: "VST3"
            cmake_extra_flags: -DWITH_ADDRESS_SANITIZER=ON -DWITH_THREAD_SANITIZER=OFF
          - name: macOS Thread Sanitizer
            os: macos-latest
            build_type: Debug
            pluginval-binary: ./pluginval/Builds/pluginval_artefacts/Debug/pluginval.app/Contents/MacOS/pluginval
            plugin_os_format: "VST3"
            cmake_extra_flags: -DWITH_ADDRESS_SANITIZER=OFF -DWITH_THREAD_SANITIZER=ON
          - name: Windows Address Sanitizer
            os: windows-latest
            build_type: Release
            pluginval-binary: ./pluginval/Builds/pluginval_artefacts/Release/pluginval.exe
            plugin_os_format: "VST3"
            cmake_extra_flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DWITH_ADDRESS_SANITIZER=ON -DWITH_THREAD_SANITIZER=OFF
            pluginval_cmake_extra_flags: -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
          - name: Windows Thread Sanitizer
            os: windows-latest
            build_type: Release
            pluginval-binary: ./pluginval/Builds/pluginval_artefacts/Release/pluginval.exe
            plugin_os_format: "VST3"
            cmake_extra_flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DWITH_ADDRESS_SANITIZER=OFF -DWITH_THREAD_SANITIZER=ON
            pluginval_cmake_extra_flags: -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded

    steps:
      - name: Set up Clang (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 17

      # This also starts up our "fake" display Xvfb, needed for pluginval
      - name: Install Linux Deps (Linux)
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype-dev libfontconfig1-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev xvfb ninja-build
          sudo /usr/bin/Xvfb $DISPLAY &

      - name: Set up Developer Command Prompt (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: choco install ninja

      - name: Install macOS Deps (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install ninja osxutils

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure
        shell: bash
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE}} ${{ matrix.cmake_extra_flags }} .
        env:
          PLUGIN_OS_FORMAT: ${{ matrix.plugin_os_format }}

      - name: Build
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.BUILD_TYPE }}

      - name: Read in .env from CMake # see GitHubENV.cmake
        shell: bash
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        shell: bash
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ matrix.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "LV2_PATH=$ARTIFACTS_PATH/LV2/${{ env.PRODUCT_NAME }}.lv2" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Checkout pluginval code
        uses: actions/checkout@v4
        with:
          path: "pluginval"
          repository: 'Tracktion/pluginval'
          submodules: recursive

      - name: Configure Pluginval
        shell: bash
        working-directory: ./pluginval
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE}} ${{ matrix.cmake_extra_flags }} ${{ matrix.pluginval_cmake_extra_flags }}
        env:
          PLUGIN_OS_FORMAT: ${{ matrix.plugin_os_format }}

      - name: Build Pluginval
        shell: bash
        working-directory: ./pluginval
        run: |
          cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.BUILD_TYPE }}
          ls ${{ env.BUILD_DIR }}/pluginval_artefacts/Debug

      - name: Setup Pluginval random seed
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD

      - name: Pluginval VST3 validations
        shell: bash
        run: |
          ${{ matrix.pluginval-binary }} --verbose --validate "${{ env.VST3_PATH }}" --disabled-tests "${{ env.PLUGINVAL_DISABLED }}"
        env:
          STRICTNESS_LEVEL: 10
          TIMEOUT_MS: 1440000
          REPEAT: 1
          RANDOM_SEED: "${{ steps.current-time.outputs.formattedTime }}"